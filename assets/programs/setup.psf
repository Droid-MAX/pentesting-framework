#!/bin/bash

VARIABLES()
{
VAR=$(curl -sL git.io/pSf | grep "VAR" | awk '{print $1}' | head -n1 | cut -c 5-)
API=$(curl -sL https://api.github.com/repos/abhackerofficial/pentesting-framework)
STAR=$(printf "$API" | grep stargazers_count | tr -d ' stargazers_count:",')
FORK=$(printf "$API" | grep forks_count | tr -d ' forks_count:",')
SIZE=$(printf "$API" | grep size | tr -d ' size:",')
SIZE=$(echo "$(( ${SIZE} / 1024)) MB")
LIMT=$(echo "$API"  | grep -o "limit exceeded")
LINK="https://github.com/abhackerofficial/pentesting-framework"
OS=$(uname -o | grep -o "Android")
NAME="pentesting-framework"
}


printf "\r:: Checking for installation..."
VARIABLES
printf "                               \r"

printf "\r                               "

RNAME() {
cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w ${1:-} | head -n 1
}
RNAME=$(RNAME 10)

SL() {
sleep 0.01
}

DISCLAIMER()
{
  echo -e "\n${C1}Disclaimer${R0} : The use of the ${C2}${B0}pentesting-framework${R0} and/or its resources is complete responsibility of the end-user. Developers assume no liabiity and are not responsible for any misuse or damage caused by ${C2}${B0}pentesting-framework${R0}. Some of your actions may be illegal and you can not use this software to test someone without written permission from person or company.${R0}\n"
}

function START() {
if [[ ${LIMT} == "limit exceeded" ]]
then cd ${HOME}
STAR="api limit exceeded"
FORK="api limit exceeded"
SIZE="api limit exceeded"
fi
printf "${C2}<${R0} Welcome to our Project Pentesting Framework. ${C2}/>${R0}\n";SL
printf "${C4}Star:${R0} $STAR\n";SL
printf "${C4}Fork:${R0} $FORK\n";SL
if [[ ${install_type} == "lite" ]]
then
printf "${C4}Size:${R0} 1.5 MB\n";SL
else
printf "${C4}Size:${R0} $SIZE\n";SL
fi
printf "${C4}Version:${R0} $VAR\n";SL
printf "${C4}Give Star On:${R0} ${R4}$LINK${R0}\n\n";SL
printf "${C2}(${R0}>${C2})${R0} Pentesting Framework Installing...\n";SL
}

INSTALL_OPTION()
{
printf "
┌────┬──────────────┬───────┬────────┬────────────┬──────────┐
│ Sn.│ Options      │ Size  │ Add-On │ Storage    │ Packages │
├────┼──────────────┼───────┼────────┼────────────┼──────────┤
│ 1. │ Full Version │ 60 MB │ 80 MB  │ 200 MB     │ 500 MB   │
│ 2. │ Lite Version │ 1.5MB │ 30 MB  │ Temporarily│ 500 MB   │
└────┴──────────────┴───────┴────────┴────────────┴──────────┘
"

while true
do
printf "[Select a option given above]: "
read select_install
if [[ ${select_install} == [1/2] ]]
then
break
else
echo "${r0SIGN} Undefined Option Entered."
fi
done
}

function COMPLETE() {
echo -e "${C4}(${R0}>${C4})${R0} Pentesting Framework installation finished.
${C4}(${R0}>${C4})${R0} Type ${C2}psfconsole${R0} for start."
}

function ALREADY() {
  echo -e "\r${C4}(${R0}>${C4})${R0} Pentesting Framework (${install_type}) is already installed to ${C2}${presentDIR}${R0}
${C4}(${R0}>${C4})${R0} Type ${C2}psfconsole${R0} for start.\n"
}

function forTermux () {

SETUP()
{
cat <<- CONF > $PREFIX/bin/psfconsole
#!$PREFIX/bin/bash
DIRNAME="${confDIRNAME}"
PNAME="psfconsole"

cd \${DIRNAME}
bash \${PNAME} \${@}
CONF
}

if [ -d "${presentDIR}" ]
then
ALREADY
echo "Answer in: Y/n"
printf "[Would you like to install pentesting-framework again?]: "
read q
if [[ ${q} == [Y/y] ]]
then
rm -rf ${presentDIR}
else
unset confDIRNAME
confDIRNAME=$installDIR
SETUP
exit 0
fi
fi

INSTALL_OPTION

if [[ ${select_install} == 1 ]]
then
DISCLAIMER
START
SETUP
chmod +x $PREFIX/bin/psfconsole
git clone ${LINK} ${confDIRNAME}
install_type=full
COMPLETE

else

DISCLAIMER
START
SETUP
chmod +x $PREFIX/bin/psfconsole
git clone ${LINK} ${confDIRNAME} --depth=1
install_type=lite
COMPLETE
fi
}

function forLinux () {

SETUP()
{
cat <<- CONF > psfconsole
#!/usr/bin/bash
DIRNAME="${confDIRNAME}"
PNAME="psfconsole"

cd \${DIRNAME}
bash \${PNAME} \${@}
CONF
}

if [ -d "${presentDIR}" ]
then
ALREADY
echo "Answer in: Y/n"
printf "[Would you like to install pentesting-framework again?]: "
read q
if [[ ${q} == [Y/y] ]]
then
sudo rm -rf ${presentDIR}
else
unset confDIRNAME
confDIRNAME=$installDIR
SETUP
fi
fi

INSTALL_OPTION

if [[ ${select_install} == 1 ]]
then
DISCLAIMER
START
SETUP
sudo mv psfconsole /usr/bin
sudo chmod +x /usr/bin/psfconsole
sudo git clone ${LINK} ${confDIRNAME}
sudo chown -R $(whoami):$(whoami) ${confDIRNAME}
install_type=full
COMPLETE

else

DISCLAIMER
START
SETUP
sudo mv psfconsole /usr/bin
sudo chmod +x /usr/bin/psfconsole
sudo git clone ${LINK} ${confDIRNAME} --depth=1
sudo chown -R $(whoami):$(whoami) ${confDIRNAME}
install_type=lite
COMPLETE
fi
}

if [[ $OS == *'Android'* ]];then
# for android
confDIRNAME="${PREFIX}/share/pentesting-framework"

#....
if [[ ! -f "${PREFIX}/etc/psf.conf" ]]
then
  presentDIR=""
else
  source ${PREFIX}/etc/psf.conf
  presentDIR="${installDIR}"
fi
#....

if [[ $1 == "--dir" ]]
then
  unset confDIRNAME
  confDIRNAME="${2}/${NAME}"
fi
forTermux
 echo "installDIR=\"${confDIRNAME}\"" > $PREFIX/etc/psf.conf
 echo "install_type=${install_type}" >> $PREFIX/etc/psf.conf
else
# for linux
confDIRNAME="/usr/share/pentesting-framework"

#....
if [[ ! -f "/etc/psf.conf" ]]
then
  presentDIR=""
else
  source /etc/psf.conf
  presentDIR="${installDIR}"
fi
#....

if [[ $1 == "--dir" ]]
then
  unset confDIRNAME
  confDIRNAME="${2}/${NAME}"
fi
forLinux
 echo "installDIR=\"${confDIRNAME}\"" > psf.conf
 echo "install_type=${install_type}" >> psf.conf
 sudo mv psf.conf /etc
fi
